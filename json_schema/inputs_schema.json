{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Inputs",
  "description": "This file contains types the protocol uses to prepare data, structure it and call out to a particular compute payload. The inputs type for a contract call, this is built from a combination of transaction data and pre-requisite data the protocol acquires in accordance with the developers program schema (WARNING: PROGRAM SCHEMAS ARE EXPERIMENTAL AND NOT YET ENABLED) Inputs takes a protocol populated compute agent `version` which is a 32 bit signed integer, an optional `Account` for the contract's account under the field `account_info`, a `Transaction` under the `transaction` field and then an `op`, i.e. an operation that will be called from *within* the contract, and the `inputs` to that `op`. The `inputs` to an op are always a JSON string, it can be an empty JSON string, and sometimes, developers may choose to use additional data that is provided in the `Transaction`. the `Inputs` struct is serialized into JSON when passed into the contract, and can be deserialized with either JSON helper functions and/or custom JSON parsing. The developer has the flexibility to do with the `Inputs`, represented by JSON as they choose.",
  "type": "object",
  "required": [
    "inputs",
    "op",
    "transaction",
    "version"
  ],
  "properties": {
    "accountInfo": {
      "description": "An optional program/contract's account in the protocol",
      "anyOf": [
        {
          "$ref": "#/definitions/Account"
        },
        {
          "type": "null"
        }
      ]
    },
    "inputs": {
      "description": "The inputs to the contract operation being called",
      "type": "string"
    },
    "op": {
      "description": "The operation in the program being called",
      "type": "string"
    },
    "transaction": {
      "description": "The transaction that made the original call",
      "allOf": [
        {
          "$ref": "#/definitions/Transaction"
        }
      ]
    },
    "version": {
      "description": "The compute agent version",
      "type": "integer",
      "format": "int32"
    }
  },
  "definitions": {
    "Account": {
      "description": "Represents an LASR account.\n\nThis structure contains details of an LASR account, including its address, associated programs, nonce, signatures, hashes, and certificates. It implements traits for serialization, hashing, and comparison.",
      "type": "object",
      "required": [
        "accountType",
        "nonce",
        "ownerAddress",
        "programAccountData",
        "programAccountLinkedPrograms",
        "programAccountMetadata",
        "programs"
      ],
      "properties": {
        "accountType": {
          "$ref": "#/definitions/AccountType"
        },
        "nonce": {
          "$ref": "#/definitions/U256"
        },
        "ownerAddress": {
          "$ref": "#/definitions/Address"
        },
        "programAccountData": {
          "$ref": "#/definitions/ArbitraryData"
        },
        "programAccountLinkedPrograms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressOrNamespace"
          },
          "uniqueItems": true
        },
        "programAccountMetadata": {
          "$ref": "#/definitions/Metadata"
        },
        "programNamespace": {
          "anyOf": [
            {
              "$ref": "#/definitions/AddressOrNamespace"
            },
            {
              "type": "null"
            }
          ]
        },
        "programs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Token"
          }
        }
      }
    },
    "AccountType": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "user"
          ]
        },
        {
          "type": "object",
          "required": [
            "program"
          ],
          "properties": {
            "program": {
              "$ref": "#/definitions/Address"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Address": {
      "description": "Represents a 20-byte Ethereum Compatible address.\n\nThis structure is used to store Ethereum Compatible addresses, which are derived from the public key. It implements traits like Clone, Copy, Debug, Serialize, Deserialize, etc., for ease of use across various contexts.",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      },
      "maxItems": 20,
      "minItems": 20
    },
    "AddressOrNamespace": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "this"
          ]
        },
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "namespace"
          ],
          "properties": {
            "namespace": {
              "$ref": "#/definitions/Namespace"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ArbitraryData": {
      "description": "Represents a generic data container.\n\nThis structure is used to store arbitrary data as a vector of bytes (`Vec<u8>`). It provides a default, cloneable, serializable, and debuggable interface. It is typically used for storing data that doesn't have a fixed format or structure.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Metadata": {
      "description": "Represents metadata as a byte vector.\n\nThis structure is designed to encapsulate metadata, stored as a vector of bytes. It supports cloning, serialization, and debugging. The metadata can be of any form that fits into a byte array, making it a flexible container.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Namespace": {
      "type": "string"
    },
    "Status": {
      "type": "string",
      "enum": [
        "locked",
        "free"
      ]
    },
    "Token": {
      "type": "object",
      "required": [
        "allowance",
        "approvals",
        "balance",
        "data",
        "metadata",
        "ownerId",
        "programId",
        "status",
        "tokenIds"
      ],
      "properties": {
        "allowance": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/U256"
          }
        },
        "approvals": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/U256"
            }
          }
        },
        "balance": {
          "$ref": "#/definitions/U256"
        },
        "data": {
          "$ref": "#/definitions/ArbitraryData"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "ownerId": {
          "$ref": "#/definitions/Address"
        },
        "programId": {
          "$ref": "#/definitions/Address"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "tokenIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/U256"
          }
        }
      }
    },
    "Transaction": {
      "type": "object",
      "required": [
        "from",
        "inputs",
        "nonce",
        "op",
        "programId",
        "r",
        "s",
        "to",
        "transactionType",
        "v",
        "value"
      ],
      "properties": {
        "from": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 20,
          "minItems": 20
        },
        "inputs": {
          "type": "string"
        },
        "nonce": {
          "$ref": "#/definitions/U256"
        },
        "op": {
          "type": "string"
        },
        "programId": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 20,
          "minItems": 20
        },
        "r": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 32,
          "minItems": 32
        },
        "s": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 32,
          "minItems": 32
        },
        "to": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 20,
          "minItems": 20
        },
        "transactionType": {
          "$ref": "#/definitions/TransactionType"
        },
        "v": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/U256"
        }
      }
    },
    "TransactionType": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "bridgeIn"
          ],
          "properties": {
            "bridgeIn": {
              "$ref": "#/definitions/U256"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "send"
          ],
          "properties": {
            "send": {
              "$ref": "#/definitions/U256"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "call"
          ],
          "properties": {
            "call": {
              "$ref": "#/definitions/U256"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "bridgeOut"
          ],
          "properties": {
            "bridgeOut": {
              "$ref": "#/definitions/U256"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "registerProgram"
          ],
          "properties": {
            "registerProgram": {
              "$ref": "#/definitions/U256"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "U256": {
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "maxItems": 4,
      "minItems": 4
    }
  }
}